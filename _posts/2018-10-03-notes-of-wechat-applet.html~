<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Introduction</a></li>
<li><a href="#sec-2">2. Code Structure</a></li>
<li><a href="#sec-3">3. Time-based Background Image</a>
<ul>
<li><a href="#sec-3-1">3.1. Configuration of index.wxml</a></li>
<li><a href="#sec-3-2">3.2. Configuration of app.wxss</a></li>
<li><a href="#sec-3-3">3.3. Configuration of index.js</a></li>
</ul>
</li>
</ul>
</div>
</div>
---
layout: post
title: "Notes of WeChat MiniApp"
permalink: /:title/
tagxs: [about]
---
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Introduction</h2>
<div class="outline-text-2" id="text-1">
<p>
According to the official introduction, the WeChat Applets can be easily acquired and spread in WeChat, that provides an enormously convenient connection between the users and abundant services. Thanks to the complete documents and the lightweight development tool, a quick start to develop a simple applet is possible. It's not impossible to say that everybody can build an applet. More information can be referred on the official online development documents: <a href="https://developers.weixin.qq.com/miniprogram/introduction/index.html?t=18082920">Introduction to WeChat Applet</a>.
</p>

<p>
Despite that a course design last semester gave me the opportunity to design the user interface using JS, HTML, and CSS, I'm green in the field of front-end development. Fortunately, there are lots of good open-source programmes, so that I can fork them and learn how does everything go. I fork a program provided by <a href="http://swiftcafe.io/2016/10/03/wx-weather-app">SwiftCafe</a>, they explain at great length the structure of the program, data acquisition, and the logic of the application layer. The complete code can be download from Github: : <a href="https://github.com/swiftcafex/wechat-weather">https://github.com/swiftcafex/wechat-weather</a>.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Code Structure</h2>
<div class="outline-text-2" id="text-2">
<p>
The structure of the program is like following:
</p>

<div class="figure">
<p><img src="file:///home/junyao/siac31.github.io/img/code_structure_of_wechat_applet.png" alt="code_structure_of_wechat_applet.png" />
</p>
</div>

<p>
The detailed description can be found at former mentioned links.
</p>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Time-based Background Image</h2>
<div class="outline-text-2" id="text-3">
<p>
Let's add the simple function to the applet now! We hope that the background image of the weather applet will change as time goes. If you have some experience in HTML, JS, and CSS, you might figure out the solution immediately. Nevertheless, in WeChat Applet the solution does differ, even though the basic idea is the same.
</p>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1"><span class="section-number-3">3.1</span> Configuration of index.wxml</h3>
<div class="outline-text-3" id="text-3-1">
<p>
Noted that this applet only has one page, the initial or in other words, the first page is described in the index.wxml file. The "box" of the page is defined by the top level class. We provide "{{}}" as the placeholder, and name it as "myclass".
</p>
<div class="org-src-container">

<pre class="src src-html">&lt;<span style="color: #84ffff;">view</span> <span style="color: #ffcc80;">class</span>=<span style="color: #9ccc65;">"{{myclass}}"</span>&gt;
...
&lt;/<span style="color: #84ffff;">view</span>&gt;
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2"><span class="section-number-3">3.2</span> Configuration of app.wxss</h3>
<div class="outline-text-3" id="text-3-2">
<p>
In app.wxss we difined the styles of three types of classes, namely "day", "sunset", and "night".
</p>
<div class="org-src-container">

<pre class="src src-css"><span style="color: #84ffff;">.day</span>{
...
<span style="color: #ffcc80;">background-image</span>: url(<span style="color: #9ccc65;">'...daytime_background...'</span>)
}

<span style="color: #84ffff;">.sunset</span>{
...
<span style="color: #ffcc80;">background-image</span>: url(<span style="color: #9ccc65;">'...sunset_background...'</span>)
}

<span style="color: #84ffff;">.night</span>{
...
<span style="color: #ffcc80;">background-image</span>: url(<span style="color: #9ccc65;">'...night_background...'</span>)
}
</pre>
</div>
<p>
Noted that, the image file must be online or converted to base64 codes.
</p>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3"><span class="section-number-3">3.3</span> Configuration of index.js</h3>
<div class="outline-text-3" id="text-3-3">
<p>
The logical interaction is implemented in index.js. The official document gives the explaination:
</p>

<blockquote>
<p>
"On the basis of JavaScript, we made some changes to facilitate the development of Mini Programs.
</p>

<ul class="org-ul">
<li>Add App and Page methods to register programs and pages.
</li>
<li>Add getApp and getCurrentPages methods to get the app instance and the current page stack respectively.
</li>
<li>Provide a rich set of APIs, such as WeChat user data, Scan, payment and other WeChat unique capabilities.
</li>
<li>Each page has an independent scope and provides modular capabilities.
</li>
<li>Since the framework is not running in a browser, some capabilities of JavaScript are not available in the web, such as document and window.
</li>
<li>All the code written by the developer will eventually be packaged as a JavaScript and run when the Mini Program starts, until the Mini Program is destroyed. Similar to ServiceWorker, the logical layer is also called App Service."
</li>
</ul>
</blockquote>


<p>
The function of changing the background image as time goes is written in Page methods.
</p>

<div class="org-src-container">

<pre class="src src-js">Page({

})
</pre>
</div>
</div>
</div>
</div>
