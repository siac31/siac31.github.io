#+OPTIONS: ^:{}
#+BEGIN_COMMENT
默认情况不转义 _
#+END_COMMENT
#+BEGIN_HTML
---
layout: post
title: "Notes --- Tools of Data Visualization"
permalink: /:title/
tagxs: [Data Visualization]
---
<head>
   <meta http-equiv="Content-Type" content="text/html;charset=utf-8">
</head>
#+END_HTML
* 前言
本文属于整理的笔记，内容包含学习笔记，个人总结心得等等，保持持续更新，希望自己能坚持学习。
参考链接：
+ [[https://www.douban.com/group/topic/113236201/][史上最全的python包管理器： Anaconda教程]]
* Anaconda
Anaconda以及Jupyter Notebook是数据分析的标准环境。Anaconda可以管理多个python版本环境：
 + 管理包
 + 管理环境
** 管理包
 + 安装包 _conda install package-name_ ， e.g.：
   + _conda insatll pandas numpy_ (一次多个安装包)
   + _conda install numpy=1.10_ (指定version)
 + 卸载包 _conda remove package-name_
 + 更新包 _conda update package-name_
 + 列出已经安装的包 _conda list_
 + 搜索名字不确定的包 _conda search search-term_, e.g. 如果不知道numpy怎么拼写的，则输入 _conda search num_
** 管理环境
 conda为不同项目简历不同的运行环境
*** 0. 安装nb-conda用于notebook自动关联nb-conda环境
_conda install nb-conda_
*** 1. 创建环境
_conda create -n env-name package-name_
  + env-name环境名称 package-name安装在环境中的包
  + -n表示环境的名称name是env-name
e.g.在名为py3的环境中加入numpy： _conda create -n py3 numpy_

#+BEGIN_CENTER
!!!创建环境时可以指定安装在环境中的python版本， 对于同时使用python2.x和python3.x时很有用。E.g.：
  + 名为py3的环境中创建python3： _conda create -n py3 python=3_
  + 名为py2的环境中创建python2： _conda create -n py2 python=2_
  + 具体特定版本如python3.6： _conda create -n py3 python=3.6_
#+END_CENTER

*** 2. 进入环境
Linux下： _source activate my-env_
在环境中对包的管理如1.中所述，不过此时安装的包只在环境中使用

*** 3. 离开环境
Linux下： _source deactivate_
*** 4. 共享环境
让别人安装你的代码中使用的所有包以及正确的版本。
在当前环境中： _conda env export > environment.yaml_, 将当前环境保存.yaml文件（包含python版本和包名称），就可在刚刚的路径中看到此文件，其他电脑中就可以使用之前导出的环境。
举个例子，进入自己的环境py3， _conda activate py3_
更新环境 _conda env update -f=/path/environment.yaml_, 其中，-f表示要导出的文件在本地的路径。
如果别人不用conda，则 pip freeze > environment.txt,别人的电脑就可以使用 pip install -r /path/environment.txt
*** 5.列出环境
_conda env list_

*** 6. 删除环境
+ _conda remove --name py2 --all_
+ 或者 _conda env remove -n env-name_
*** 7. 查看环境
  _conda info --envs_

** 例子
（以下例子为Ubuntu环境下）创建一个名为numpyexample的新环境：

[[../img/conda1.png]]

中途会询问你是否在这个环境中下载某些包，最后心得环境建成后，得到以下提示告知你如何进入和退出一个环境：

[[../img/conda3.png]]

[[../img/conda4.png]]

输入source activate numpyexample即可进入到该环境。更改工作空间，输入jupyter notebook即可在notebook中打开一个项目。
* Numpy
Numpy有着较强的数字计算能力(基于numpy的开源python库Pandas以后再记录），是科学计算的开源python扩充库，是其他数据分析包的基础包，很多的包都是基于Numpy的，比如Pandas，NumPy为python提供了高性能的数组与矩阵运算能力。

** Ndarray多维数组
#+BEGIN_COMMENT
C-c C-c 自动格式化表格

<Tab> 跳到下一个字段

S- <Tab> 注意，用右Shift建，跳到前一个字段

S-M- 下方向键，在当前行之前插入一行

C-c <RET> 在当前行下面插入一行，并且光标移动到新插入的行
#+END_COMMENT
#+CAPTION: 常用函数
| 函数             | 使用说明                             |
|------------------+--------------------------------------|
| arrange(n)      | 类似于内置的range函数，创建数组0~n-1 |
| ones((m,n))      | 创建指定形状的全1数组或矩阵mxn       |
| ones\_like(arr1) | 根据矩阵arr1和它的dtype创建一个全1矩阵 |
| zeros,zeros_like  | 同上，全0                            |
| empty,empty_like | 同上，空                             |
| eye(n,dtype='int32'),identity |单位方阵 nxn                              |

*** 创建多维数组
多维数组的创建可以从列表，元祖，多维数组，上述BIF等方式创立
#+CAPTION: 数据类型和例子
|       列表       |           [1,2,3,4]          |
|      元祖     |  （1,2,3,4）|
| 多维数组|   [[1,2,3,4],[1,2,3,4]]  |

[[../img/createArrayfromOthers.png]]

#+CAPTION: 属性
|     属性      |       解释            |
| shape (array.shape) |  形状，各个数组在数据轴上元素的个数 |
| dtype |   类型 |
|  ndim |    数组轴的个数 |
|    itemsize|元素字节大小 |
*** 数据类型转换
数据类型可以在数组创建时通过给属性dtype赋值指定，也可以调用BIF astype(np.float64),astype(np.int32)或者astype('string_')强制转换。

[[../img/datatypeconver.png]]

*** 数组形状的改变（重塑，合并，拼接，拆分，转置，随机函数）
+ 重塑 array_to_be_reshaped.reshape()。指定重塑的形状

[[../img/reshape.png]]

+ 合并 np.concatenate([arr1,arr2],axis)。指定被拼接的数组以及拼接方向，例子如下：
#+BEGIN_SRC python -n
arr1 = np.arange(6).reshape(3,-1)
arr2=np.arange(6,12).reshape(3,-1)
arr3 = np.concatenate([arr1,arr2],axis=0)
arr4 = np.concatenate([arr1,arr2],axis=1)
arr3
arr4
#+END_SRC

输出arr3 arr4分别如下：：
#+BEGIN_SRC
array([[ 0,  1],
       [ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [ 8,  9],
       [10, 11]])

array([[ 0,  1,  6,  7],
       [ 2,  3,  8,  9],
       [ 4,  5, 10, 11]])
#+END_SRC

#+BEGIN_CENTER
*得到arr3,arr4还有另一种方法，np.vstack((arr1,arr2))以及np.hstack((arr1,arr2))。*
#+END_CENTER

+ 拆分np.split(arr,[k,l]) #k,l为整数，代表将数组按照如下拆分 [0:k) [k:l) [l:end]

+ 装置 transpose()指定一个新的数据轴，例如一个二维数组，默认的数据轴序列为（0,1）代表0轴1轴，转置变为（1,0）1轴变为原来的0轴。三位数值默认(0,1,2)转置后可变为（2,1,0），（2,0,1）等等。通过一个例子来说明：

假设有一个三位数组：
#+BEGIN_SRC
array([[[ 0,  1,  2,  3],
       [ 4,  5,  6,  7]],

       [[ 8,  9, 10, 11],
        [12, 13, 14, 15]]])
#+END_SRC

0轴1轴2轴到底长什么样？如下图：

[[../img/Axis_01.jpg]]

根据上面所说，最外层括号代表0轴，也就是说，从0轴看下去看到两个“面”，1轴看下去看到两根“线”，2轴看下去只看到4个点。
一个多维数组，最外层的square bracket代表0轴，依次往内推。当对arr.transpose((2,1,0))可知，看2轴的方式变为原来看零轴的方式，看0轴的方式变为原来看2轴的方式。

[[../img/Axis_02.jpg]]

最终输出：
#+BEGIN_SRC
array([[[ 0, 8],
        [ 4, 12]],

       [[ 7,  9],
        [ 5, 13]],

       [[ 6, 14],
        [ 2, 10]],

       [[ 7, 15],
        [ 3, 11]]])
#+END_SRC


** 数组的索引和切片

coming soon...
布尔索引
切片
注意哦 使用.copy()切片后进行的操作原数组不改变 否则切片后对切片操作原数组会改变 切片为了批量处理数组的切片
** 数组运算
*** 基本运算
*** 判断运算
*** 统计运算


** 案例-- 灰度变化
coming soon...
